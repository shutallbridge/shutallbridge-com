---
import { type HTMLAttributes } from "astro/types";

export interface Props extends HTMLAttributes<"div"> {
  layout: "sydney5";
}

const { layout, class: className, ...rest } = Astro.props;
---

<style is:global>
  .bento-query-container {
    container-type: inline-size;
    width: 100%;
    max-width: calc(240px * 4 + 16px * 3);
  }

  .bento-grid {
    display: grid;
    grid-auto-rows: 240px;
    gap: 16px;

    /* css variable doesn't work as a container query */
    grid-template-columns: repeat(1, minmax(0, 1fr));
    @container (min-width: calc(240px * 2 + 16px * 1)) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
    @container (min-width: calc(240px * 4 + 16px * 3)) {
      grid-template-columns: repeat(4, minmax(0, 240px));
    }

    & > *:nth-child(1) {
      grid-area: A;
    }
    & > *:nth-child(2) {
      grid-area: B;
    }
    & > *:nth-child(3) {
      grid-area: C;
    }
    & > *:nth-child(4) {
      grid-area: D;
    }
    & > *:nth-child(5) {
      grid-area: E;
    }
    & > *:nth-child(6) {
      grid-area: F;
    }
    & > *:nth-child(7) {
      grid-area: G;
    }
    & > *:nth-child(8) {
      grid-area: H;
    }
  }

  .sydney-5 {
    grid-template-areas:
      "A"
      "B"
      "C"
      "D"
      "E";
    @container (min-width: calc(240px * 2 + 16px * 1)) {
      grid-template-areas:
        "A B"
        "A C"
        "D D"
        "E E";
    }
    @container (min-width: calc(240px * 4 + 16px * 3)) {
      grid-template-areas:
        "A B C C"
        "A D D E";
    }
  }
</style>

<div class:list={["bento-query-container", className]} {...rest}>
  <div class:list={["bento-grid", { "sydney-5": layout === "sydney5" }]}>
    <slot />
  </div>
</div>
